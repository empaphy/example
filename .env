################################################################################
# Set or change pre-defined environment variables in Docker Compose.
#
# Compose supports declaring default environment variables in this file if it
# is in the folder where the docker-compose command is executed (current working
# directory).
#
# The following syntax rules apply to this .env file:
#   - Compose expects each line in an `env` file to be in `VAR=VAL` format.
#   - Lines beginning with `#` are processed as comments and ignored.
#   - Blank lines are ignored.
#   - There is no special handling of quotation marks. This means that
#     they are part of the VAL.
#
# The environment variables you define here are used for variable substitution
# in your Compose file, and can also be used to define CLI variables. They are
# _not_ automatically injected into the containers.
################################################################################

#
# Specifies when to print ANSI control characters.
#
# Supported values:
#   - `auto`, Compose detects if TTY mode can be used. Otherwise, use plain
#     text mode
#   - `never`, use plain text mode
#   - `always` or `0`, use TTY mode
#
#COMPOSE_ANSI=auto

#
# Delegate builds to bake for better performance.
#
#COMPOSE_BAKE=false

#
# When enabled, Compose performs path conversion from Windows-style to
# Unix-style in volume definitions.
#
#COMPOSE_CONVERT_WINDOWS_PATHS=0

#
# Lets you specify which environment files Compose should use if `--env-file`
# isn't used.
#
# When using multiple environment files, use a comma as a separator.
#
#COMPOSE_ENV_FILES=.env

#
# This is an opt-out variable. When turned off it deactivates the experimental
# features such as the navigation menu or Synchronized file shares.
#
#COMPOSE_EXPERIMENTAL=1

#
# Specifies the path to a Compose file.
#
# Specifying multiple Compose files is supported.
#
# If not provided, Compose looks for a file named `(docker-)compose.y(a)ml`
# in the current directory and, if not found, then Compose searches each
# parent directory recursively until a file by that name is found.
#
# When specifying multiple Compose files, the path separators are, by default,
# `:` (colon) on Mac and Linux and  `;` (semicolon) on Windows.
#
# The path separator can also be customized using `COMPOSE_PATH_SEPARATOR`.
#
#COMPOSE_FILE=docker-compose.yaml

#
# When enabled, Compose doesn't try to detect orphaned containers for the
# project.
#
#COMPOSE_IGNORE_ORPHANS=0

#
# When enabled, Compose displays a navigation menu where you can choose to
# open the Compose stack in Docker Desktop, switch on watch mode, or use Docker
# Debug.
#
#COMPOSE_MENU=0

#
# Specifies the maximum level of parallelism for concurrent engine calls.
#
#COMPOSE_PARALLEL_LIMIT=

#
# Specifies a different path separator for items listed in `COMPOSE_FILE`.
#
#COMPOSE_PATH_SEPARATOR=;

#
# Specifies one or more profiles to be enabled when `docker compose up` is run.
#
# Services with matching profiles are started as well as any services for which
# no profile has been defined.
#
# If specifying multiple profiles, use a comma as a separator.
#
#COMPOSE_PROFILES=

#
# Defines the type of progress output, if `--progress` isn't used.
#
# Supported values are `auto`, `tty`, `plain`, `json`, and `quiet`.
#
#COMPOSE_PROGRESS=auto

#
# Sets the project name.
#
# This value is prepended along with the service name to the container's name
# on startup.
#
# Project names must contain only lowercase letters, decimal digits, dashes,
# and underscores, and must begin with a lowercase letter or decimal digit.
#
# If set, this value overrides the top-level `name:` from the spec file. If
# neither this value, nor `name:` is set, then the basename of the project
# directory is used.
#
#COMPOSE_PROJECT_NAME=example

#
# When enabled, Compose automatically removes orphaned containers when updating
# a service or stack.
#
#COMPOSE_REMOVE_ORPHANS=0

#
# When enabled, Compose writes its internal status and progress messages to
# `stdout` instead of `stderr`.
#
# The default value is false to clearly separate the output streams between
# Compose messages and your container's logs.
#
#COMPOSE_STATUS_STDOUT=0


# This is some clever env var magic to get the appropriate composer home dir.

# Defines the base directory relative to which user-specific configuration files should be stored.
XDG_CONFIG_HOME=${XDG_SESSION_CLASS:+$HOME/.config}

# Allows you to change the Composer home directory.
#
# This is a hidden, global (per-user on the machine) directory that is shared between all projects.
# By default, it points to `~/.composer` on macOS. On *nix systems that follow the XDG Base Directory Specifications, it
# points to `$XDG_CONFIG_HOME/composer`. On other *nix systems, it points to `~/.composer`.
COMPOSER_HOME=${XDG_CONFIG_HOME:-$HOME/.}${XDG_CONFIG_HOME:+/}composer
